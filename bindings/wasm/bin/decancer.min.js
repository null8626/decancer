let wasm,heap=Array(128).fill(void 0);function getObject(e){return heap[e]}heap.push(void 0,null,!0,!1);let heap_next=heap.length;function dropObject(e){e<132||(heap[e]=heap_next,heap_next=e)}function takeObject(e){let t=getObject(e);return dropObject(e),t}let cachedTextDecoder="undefined"!=typeof TextDecoder?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode(){throw Error("TextDecoder not available")}};"undefined"!=typeof TextDecoder&&cachedTextDecoder.decode();let cachedUint8Memory=null;function getUint8Memory(){return(null===cachedUint8Memory||0===cachedUint8Memory.byteLength)&&(cachedUint8Memory=new Uint8Array(wasm.memory.buffer)),cachedUint8Memory}function getStringFromWasm(e,t){return e>>>=0,cachedTextDecoder.decode(getUint8Memory().subarray(e,e+t))}let WASM_VECTOR_LEN=0,cachedTextEncoder="undefined"!=typeof TextEncoder?new TextEncoder("utf-8"):{encode(){throw Error("TextEncoder not available")}},encodeString="function"==typeof cachedTextEncoder.encodeInto?function(e,t){return cachedTextEncoder.encodeInto(e,t)}:function(e,t){let n=cachedTextEncoder.encode(e);return t.set(n),{read:e.length,written:n.length}};function passStringToWasm(e,t,n){if(void 0===n){let n=cachedTextEncoder.encode(e),r=t(n.length,1)>>>0;return getUint8Memory().subarray(r,r+n.length).set(n),WASM_VECTOR_LEN=n.length,r}let r=e.length,a=t(r,1)>>>0,i=getUint8Memory(),o=0;for(;o<r;o++){let t=e.charCodeAt(o);if(t>127)break;i[a+o]=t}if(o!==r){0!==o&&(e=e.slice(o)),a=n(a,r,r=o+3*e.length,1)>>>0;let t=getUint8Memory().subarray(a+o,a+r);o+=encodeString(e,t).written}return WASM_VECTOR_LEN=o,a}let cachedInt32Memory=null;function getInt32Memory(){return(null===cachedInt32Memory||0===cachedInt32Memory.byteLength)&&(cachedInt32Memory=new Int32Array(wasm.memory.buffer)),cachedInt32Memory}function decancer(e){let t=passStringToWasm(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN,r=wasm.decancer(t,n);return CuredString.__wrap(r)}function addHeapObject(e){heap_next===heap.length&&heap.push(heap.length+1);let t=heap_next;return heap_next=heap[t],heap[t]=e,t}export class CuredString{static __wrap(e){e>>>=0;let t=Object.create(CuredString.prototype);return t.__wbg_ptr=e,t}__destroy_into_raw(){let e=this.__wbg_ptr;return this.__wbg_ptr=0,e}free(){let e=this.__destroy_into_raw();wasm.__wbg_curedstring_free(e)}startsWith(e){let t=passStringToWasm(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN;return 0!==wasm.curedstring_startsWith(this.__wbg_ptr,t,n)}endsWith(e){let t=passStringToWasm(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN;return 0!==wasm.curedstring_endsWith(this.__wbg_ptr,t,n)}contains(e){let t=passStringToWasm(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN;return 0!==wasm.curedstring_contains(this.__wbg_ptr,t,n)}equals(e){let t=passStringToWasm(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN;return 0!==wasm.curedstring_equals(this.__wbg_ptr,t,n)}toString(){let e,t;try{let a=wasm.__wbindgen_add_to_stack_pointer(-16);wasm.curedstring_toString(a,this.__wbg_ptr);var n=getInt32Memory()[a/4+0],r=getInt32Memory()[a/4+1];return e=n,t=r,getStringFromWasm(n,r)}finally{wasm.__wbindgen_add_to_stack_pointer(16),wasm.__wbindgen_free(e,t,1)}}}async function __wbg_load(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t)}let n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{let n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}function __wbg_get_imports(){return{wbg:{__wbindgen_error_new:function(e,t){return addHeapObject(new Error(getStringFromWasm0(e,t)))},__wbindgen_throw:function(e,t){throw new Error(getStringFromWasm0(e,t))}}}}function __wbg_finalize_init(t,n){wasm=t.exports,e.__wbindgen_wasm_module=n,cachedInt32Memory=null,cachedUint8Memory=null}export default async function e({local:e}){if(void 0===wasm){let t=__wbg_get_imports(),n=fetch(e?new URL("decancer.wasm",import.meta.url):"https://cdn.jsdelivr.net/gh/null8626/decancer@master/bindings/wasm/bin/decancer.wasm"),{instance:r,module:a}=await __wbg_load(await n,t);return __wbg_finalize_init(r,a),decancer}}