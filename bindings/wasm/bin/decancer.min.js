let wasm;const cachedTextDecoder=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});cachedTextDecoder.decode();let cachedUint8Memory0=new Uint8Array;function getUint8Memory0(){return 0===cachedUint8Memory0.byteLength&&(cachedUint8Memory0=new Uint8Array(wasm.memory.buffer)),cachedUint8Memory0}function getStringFromWasm0(e,t){return cachedTextDecoder.decode(getUint8Memory0().subarray(e,e+t))}let WASM_VECTOR_LEN=0;const cachedTextEncoder=new TextEncoder("utf-8"),encodeString="function"==typeof cachedTextEncoder.encodeInto?function(e,t){return cachedTextEncoder.encodeInto(e,t)}:function(e,t){const n=cachedTextEncoder.encode(e);return t.set(n),{read:e.length,written:n.length}};function passStringToWasm0(e,t,n){if(void 0===n){const n=cachedTextEncoder.encode(e),r=t(n.length);return getUint8Memory0().subarray(r,r+n.length).set(n),WASM_VECTOR_LEN=n.length,r}let r=e.length,a=t(r);const s=getUint8Memory0();let c=0;for(;c<r;c++){const t=e.charCodeAt(c);if(t>127)break;s[a+c]=t}if(c!==r){0!==c&&(e=e.slice(c)),a=n(a,r,r=c+3*e.length);const t=getUint8Memory0().subarray(a+c,a+r);c+=encodeString(e,t).written}return WASM_VECTOR_LEN=c,a}let cachedInt32Memory0=new Int32Array;function getInt32Memory0(){return 0===cachedInt32Memory0.byteLength&&(cachedInt32Memory0=new Int32Array(wasm.memory.buffer)),cachedInt32Memory0}class CuredString{static __wrap(e){const t=Object.create(CuredString.prototype);return t.ptr=e,t}__destroy_into_raw(){const e=this.ptr;return this.ptr=0,e}free(){const e=this.__destroy_into_raw();wasm.__wbg_curedstring_free(e)}startsWith(e){const t=passStringToWasm0(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN;return 0!==wasm.curedstring_startsWith(this.ptr,t,n)}endsWith(e){const t=passStringToWasm0(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN;return 0!==wasm.curedstring_endsWith(this.ptr,t,n)}contains(e){const t=passStringToWasm0(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN;return 0!==wasm.curedstring_contains(this.ptr,t,n)}equals(e){const t=passStringToWasm0(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN;return 0!==wasm.curedstring_equals(this.ptr,t,n)}toString(){try{const n=wasm.__wbindgen_add_to_stack_pointer(-16);wasm.curedstring_toString(n,this.ptr);var e=getInt32Memory0()[n/4+0],t=getInt32Memory0()[n/4+1];return getStringFromWasm0(e,t)}finally{wasm.__wbindgen_add_to_stack_pointer(16),wasm.__wbindgen_free(e,t)}}}function decancer(e){const t=passStringToWasm0(e,wasm.__wbindgen_malloc,wasm.__wbindgen_realloc),n=WASM_VECTOR_LEN,r=wasm.decancer(t,n);return CuredString.__wrap(r)}async function load(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}export default async function init(){const{instance:e,module:t}=await load(await fetch("https://raw.githubusercontent.com/null8626/decancer/v1.5.5/bindings/wasm/bin/decancer.wasm"),{wbg:{__wbindgen_throw:(e,t)=>{throw new Error(getStringFromWasm0(e,t))}}});return wasm=e.exports,init.__wbindgen_wasm_module=t,cachedInt32Memory0=new Int32Array,cachedUint8Memory0=new Uint8Array,decancer}
